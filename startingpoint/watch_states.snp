Started = 1
__doc__ = ' Eventhandler class represents the simulator which interprets the model. '
__module__ = 'EventHandler'
aftersnp = []
beforesnp = []
components = {}
connections = {}
description = ''
empty_event_signal = None
encapsulated_components = {}
enter = {}
exit = {}
final = []
finished = 0
haddition = []
has_interactor = 0
history = {}
imports = {}
influencees = {}
init = ['from Tkinter import *\nfrom DWatchGUI import DWatchGUI\nroot = Tk()\nroot.title("A Title")\ng = DWatchGUI(root, eventhandler)\neventhandler.start()\nroot.mainloop()']
interactor = ['setup_gui_debugger(eventhandler, debugger)\n']
internal_num = 2
internal_prefix = 0
local_restored = 0
macro = {'[DUMP]': [[['[msg]', '']], 'dump_message([msg])'], '[EVENT]': [[['[ev]', ''], ['[p]', '[]'], ['[lock]', 'None']], 'eventhandler.event([ev], [p], 1, [lock])'], '[PARAMS]': [[], 'eventhandler.get_event_params()'], '[SENDER]': [[], 'eventhandler.get_event_sender()'], '[EXTEVENT]': [[['[ev]', ''], ['[p]', ''], ['[rec]', '']], 'eventhandler.external_event([ev], [p], [rec])'], '[CURRENTSTATE]': [[], 'eventhandler.get_current_state()'], '[SNAPSHOTREQ]': [[['[time]', '']], 'eventhandler.request_snapshot([time])'], '[INSTATE]': [[['[state]', ''], ['[check_substate]', '1']], 'eventhandler.is_in_state([state], [check_substate])'], '[DESCRIPTION]': [[], 'eventhandler.description'], '[SYNCALL]': [[['[event]', ''], ['[params]', ''], ['[listento]', '']], 'eventhandler.synchronous_call([event], [params], [listento])'], '[SNAPSHOTRET]': [[['[time]', '']], 'eventhandler.retrieve_snapshot([time])']}
model_name = '.\\watch_states.des'
modeltext = None
newttrans = {'TimeDisplay': [['__INTERNAL_0_TIME_1', '1', 0, 1]], 'Start': [['__INTERNAL_0_TIME_0', '0', None, 0]]}
options = {'Timewarp': '0', 'ModelName': 'watch_states', 'InnerTransitionFirst': '0', 'TimewarpPort': None, 'TopLevel': '0', 'Harel': '1', 'TimeVariable': None, 'MessageTime': 'None'}
outgoing_table = {}
param = {}
ports = {}
required_components = {}
required_connections = []
restore = []
restored = 0
snapshot_objects = []
snapshot_requests = []
snapshot_retrieve = None
state = ['TimeDisplay']
stateH = {'TimeDisplay': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}, 'Start': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 1, '[HS*]': 0, '[PA]': {}}, 'ChronoDisplay': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}}
taddition = []
top_level = 1
trans = {'lightOff2': [{'[HS]': 0, 'S': 'TimeDisplay', '[TP]': 0, 'O': ['g.unsetIndiglo()'], 'N': 'TimeDisplay'}], 'changeMode': [{'[HS]': 0, 'S': 'TimeDisplay', '[TP]': 0, 'O': ['g.refreshChronoDisplay()', 'print("Going to ChronoDisplay")'], 'N': 'ChronoDisplay'}], '__INTERNAL_0_TIME_0': [{'[TP]': 0, 'O': ['dump_message("start printing")'], 'N': 'TimeDisplay', '[HS]': 0, 'S': 'Start'}], '__INTERNAL_0_TIME_1': [{'[TP]': 0, 'O': ['g.increaseTimeByOne()', 'g.refreshTimeDisplay()'], 'N': 'TimeDisplay', '[HS]': 0, 'S': 'TimeDisplay'}], 'lightOn': [{'[HS]': 0, 'S': 'TimeDisplay', '[TP]': 0, 'O': ['g.setIndiglo()'], 'N': 'TimeDisplay'}], 'print("Returning to TimeDisplay")': [{'[HS]': 0, 'S': 'ChronoDisplay', '[TP]': 0, 'N': 'TimeDisplay'}], 'lightOff': [{'[HS]': 0, 'S': 'TimeDisplay', '[TP]': 0, 'O': ['g.wait()'], 'N': 'TimeDisplay'}]}
use_gui = 1
work_path = '.\\svmwork'
global_snapshot_objects = {}
clock_threads = ["__doc__ = ' The Clock is a scheduler running in another thread. When it is time\\n     to raise an event, it runs the function func with parameter param.\\n '\n__module__ = 'Clock'\nextendedparam = 1\ninter = 1\ninterval = '1'\nparam = [<StringUtil.EventObject instance at 0x022C1468>, [], 1]\nstopped = 0\nuselock = 1\nfirst_interval = 0.27999997139\n"]
